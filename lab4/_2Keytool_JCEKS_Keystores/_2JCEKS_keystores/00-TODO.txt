#/bin/sh!
# Como criar uma keystore para guardar chaves simetricas
#
# keytool -genseckey -alias <entry> -keyalg <alg> -keysize <size> -keystore <keystorename> -storetype jceks
# 
# Notar que "by default" a keytool usa keystores JKS e estas keystores sao
# usadas para suportar chaves assimetricas / alg. de chave publica ou gestao
# de certificados de chave publcia nos diversos formatos suportados.
#

# Exemplo no caso de gestao de chaves simetricas
# gerar e guardar uma chave AES de 256 bits numa entrada entry1 
# na keystore mykeystore.jeks
#
# For more information on the keytool see:
# https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html
#
echo ...
echo "GENERATING aes and 3des keys, storing in
two entries of mykeystore.jecks, a java keystore in JCEKS format....."
echo ...

keytool -genseckey -alias aeskey -keyalg aes -keysize 256 -keystore mykeystore.jceks -storetype jceks
keytool -genseckey -alias 3deskey -keyalg DESede -keysize 168 -keystore mykeystore.jceks -storetype jceks


echo "OK, DONE !"
echo ...

# 
# Can use jecks storetypes to manage "local secrets, secret-keys etc",
# protected by PWDs, passphreases ...
# We can also have jceks storetypes managing secrecy parameters, such as
# other PWDs, secrets, multiple crypto secret keys, or parameters that
# we want to maintain under secrecy and exposure control
#
# BUT ...
# Java keystores with JCEKS store types are only usable for Java (it is
# an internal-format of a Java keystore (key-value) type. 
# For a more generic use you can/must use standardiazed representation
# formats for the stored entries, using preferentially the PKCS#12
# representation pattern (standard), also manageable on possible
# heterogeneous systems (with interoperable support you can find in
# other systems and programmin languages and libraries).

# The keytool also provides you with format conversion facilities
# between keystore types, ex:

echo .... now ...
echo "CONVERTING mykeystore.jecks (JCEKS format) and the aeskey entry  to mykeystore.pkcs12
(a Java Keystore in PKCS#12 Format ..."

keytool -importkeystore -srckeystore mykeystore.jceks -srcstoretype jceks -srcalias aeskey  -destkeystore newkeystore.pkcs12 -destalias aeskey -deststoretype pkcs12

echo "OK, DONE !"

# Finally, you must rememeber that the keytools is ok mainly as a
# "bootstrap" tool for crypto in Java ...
# You can use also if you want keytool enabled GUI apps.
# Ex: KeyStore Explorer (see https://keystore-explorer.org/ )

